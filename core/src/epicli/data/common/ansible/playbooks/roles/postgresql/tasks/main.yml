---
- name: Set facts
  set_fact:
    enabled_extensions: >-
      {{ (_defined_extensions | selectattr('config.enabled') | list) + _undefined_extensions }}
  vars:
    _defined_extensions: >-
      {{ specification.extensions
          | dict2items(key_name='name', value_name='config')
          | selectattr('config.enabled', 'defined')
          | list }}
    _undefined_extensions: >-
      {{ specification.extensions
          | dict2items(key_name='name', value_name='config')
          | selectattr('config.enabled', 'undefined')
          | list }}

- name: Install OS-specific packages
  package:
    name: "{{ _packages[ansible_os_family] }}"
    state: present
  vars:
    _packages:
      Debian:
        - postgresql-13
        - postgresql-contrib-13
        - python-psycopg2 # required for postgresql ansible management
      RedHat:
        - postgresql13-server
        - python-psycopg2 # required for postgresql ansible management
  module_defaults:
    yum: { lock_timeout: "{{ yum_lock_timeout }}" }

# Extension packages need to be installed first to be able to process PostgreSQL config
- name: Install extension packages
  include_tasks: extensions/{{ data.name }}/packages.yml
  loop_control:
    loop_var: data
  loop: "{{ enabled_extensions }}"

- name: Create directories and ensure correct permissions
  file:
    path: "{{ item }}"
    state: directory
    owner: postgres
    group: postgres
    mode: u=rwx,g=,o=
  loop:
    - /var/log/postgresql
    - "{{ pg.data_dir[ansible_os_family] }}" # Permissions should be u=rwx (0700) or u=rwx,g=rx (0750)

- name: RedHat | Initialize database
  block:
    - name: Check initialization status (RedHat)
      stat:
        path: "{{ pg.config_dir[ansible_os_family] }}/pg_hba.conf"
      register: pg_hba_conf_stat

    - name: Initialize database (RedHat)
      command: /usr/pgsql-13/bin/postgresql-13-setup initdb {{ pg.service_name[ansible_os_family] }}
      when:
        - not pg_hba_conf_stat.stat.exists
  when:
    - ansible_os_family == 'RedHat'

- name: Copy pg_hba.conf
  template:
    src: pg_hba.conf.j2
    dest: "{{ pg.config_dir[ansible_os_family] }}/pg_hba.conf"
    owner: postgres
    group: postgres
    mode: u=rw,g=,o=
    backup: true
  register: change_pg_hba_conf

# Used in postgresql-epiphany.conf.j2
- name: Set runtime_shared_preload_libraries fact
  block:
    - name: Collect facts about system services
      service_facts:
      register: services_state

    - name: Get PostgreSQL settings
      become: true
      become_user: postgres
      vars:
        _service: "{{ pg.service_name[ansible_os_family] }}.service"
        _state: "{{ ansible_facts.services[_service] }}"
      postgresql_info:
        filter: settings
      register: postgresql_info
      when:
        - "_service|string in ansible_facts.services"
        - "_state|string == 'started'"

    - name: Set runtime_shared_preload_libraries fact
      set_fact:
        runtime_shared_preload_libraries: "{{ postgresql_info.settings.shared_preload_libraries.setting }}"
      when:
        - postgresql_info.settings is defined

- name: Create Epiphany managed configuration sub-file
  template:
    src: postgresql-epiphany.conf.j2
    dest: "{{ pg.config_dir[ansible_os_family] }}/postgresql-epiphany.conf"
    owner: postgres
    group: postgres
    mode: u=rw,g=,o=
  register: change_postgresql_epiphany_conf

- name: Copy postgresql.conf
  copy:
    src: postgresql.conf
    dest: "{{ pg.config_dir[ansible_os_family] }}/postgresql.conf"
    owner: postgres
    group: postgres
    mode: u=rw,g=,o=
    backup: true
  register: change_postgresql_conf

- name: Restart postgresql service if configuration changed
  systemd:
    name: "{{ pg.service_name[ansible_os_family] }}"
    state: restarted
  when: change_pg_hba_conf
    or change_postgresql_epiphany_conf
    or change_postgresql_conf

# This is a separate task as service restart runs not each time
- name: Enable postgresql service
  systemd:
    name: "{{ pg.service_name[ansible_os_family] }}"
    enabled: true

- name: Configure postgresql logrotate
  block:
    - name: Remove logrotate configuration provided by 'postgresql-common' package
      file:
        path: /etc/logrotate.d/postgresql-common
        state: absent
      when: ansible_os_family == 'Debian'

    - name: Create postgresql logrotate configuration file
      template:
        src: logrotate-postgresql.conf.j2
        dest: /etc/logrotate.d/postgresql
        owner: root
        group: root
        mode: u=rw,g=r,o=r

- name: Include extensions
  include_tasks: extensions/{{ data.name }}/extension.yml
  loop_control:
    loop_var: data
  loop: "{{ enabled_extensions }}"

# PgPool is configured only if such K8s application is enabled
- name: Extensions | Set up PgPool
  block:
    - name: Extensions | Include PgPool vars from applications role
      include_vars:
        file: roles/applications/vars/main.yml
        name: applications_role_config
      when:
        - "'applications' in roles_with_generated_vars"

    - name: Extensions | Include PgPool setup tasks
      include_tasks: extensions/pgpool/extension.yml
      vars:
        pgpool: >-
          {{ applications_role_config.specification.applications | default([])
                                                                 | selectattr("name", "equalto", "pgpool")
                                                                 | selectattr('enabled')
                                                                 | map(attribute='pgpool')
                                                                 | list
                                                                 | first
                                                                 | default({}) }}
      when:
        - pgpool.env is defined
        - groups['postgresql'][0] == inventory_hostname
